# ==================== Environment Configuration ====================
# Copy this file to .env and update values for your environment
# NEVER commit .env to git - it contains sensitive information
# Add .env to .gitignore: echo ".env" >> .gitignore

# ==================== Server Configuration ====================
# Server port (default: 5000)
PORT=5000

# Node environment (development, test, production)
# Use: development (debug enabled), test (rate limits disabled), production (strict mode)
NODE_ENV=development

# ==================== Database Configuration ====================
# Path to JSON database file (for development)
# In production, migrate to PostgreSQL or MongoDB
DB_FILE=./db.json

# ==================== JWT Secret (CRITICAL SECURITY) ====================
# REQUIRED: JWT secret key for signing authentication tokens
# 
# SECURITY WARNING:
# - This MUST be a strong, randomly generated string
# - NEVER use a weak or predictable secret
# - NEVER hardcode in source files
# - MUST be different for each environment
# - MUST be at least 32 characters (256 bits)
# 
# Generate a secure secret:
# On Linux/Mac:   openssl rand -hex 32
# On Windows:     node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# Online:         https://generate-random.org/encryption-key-generator (NOT for production)
#
JWT_SECRET=your-super-secret-key-here-change-this-in-production

# ==================== CORS Configuration ====================
# CORS_ORIGIN: Allowed frontend origin for cross-origin requests
# 
# Development (localhost):
CORS_ORIGIN=http://localhost:3000
#
# Production (your domain):
# CORS_ORIGIN=https://yourdomain.com
#
# SECURITY WARNING:
# - Set to your specific frontend domain in production
# - Never use * (wildcard) for CORS_ORIGIN - it allows all origins
# - Wildcard effectively disables CORS protection
# - Always validate and restrict to known domains
#
# Examples:
# CORS_ORIGIN=https://myrestaurant.com
# CORS_ORIGIN=https://admin.myrestaurant.com

# ==================== Authentication Configuration ====================
# JWT Token Expiry (default: 2h for 2 hours)
# Format: {number}h|d|w (hours/days/weeks)
JWT_EXPIRY=2h

# ==================== Optional: Redis Configuration ====================
# For production token blacklist (distributed systems)
# Replace in-memory token blacklist with Redis
#
# Redis URL format: redis://[username:password@]host:port[/database]
# Examples:
# REDIS_URL=redis://localhost:6379
# REDIS_URL=redis://:password@redis.example.com:6379
#
# Leave commented out to use in-memory blacklist (development)
# REDIS_URL=redis://localhost:6379

# ==================== Logging Configuration ====================
# Log level: error, warn, info, debug
LOG_LEVEL=info

# ==================== Rate Limiting Configuration ====================
# Registration attempts per IP per 15 minutes
REGISTER_RATE_LIMIT=5

# Login attempts per IP per 15 minutes (counts failures, not successes)
LOGIN_RATE_LIMIT=10

# Global rate limit per IP per 15 minutes
GLOBAL_RATE_LIMIT=100

# ==================== Production Checklist ====================
#
# Before deploying to production, ensure:
# 
# 1. JWT_SECRET is set to a strong, random value (32+ characters)
#    Command: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# 
# 2. CORS_ORIGIN is set to your frontend domain (NOT localhost or *)
#    Example: https://yourdomain.com
# 
# 3. NODE_ENV is set to 'production'
# 
# 4. All environment variables are stored securely (AWS Secrets Manager, etc.)
# 
# 5. .env file is NOT committed to git
# 
# 6. HTTPS/SSL certificates are installed
# 
# 7. Rate limiting values are appropriate for your traffic
# 
# 8. Logging is configured and monitored
#
